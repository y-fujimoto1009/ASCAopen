{"version":3,"sources":["webpack:///./node_modules/@capacitor/filesystem/dist/esm/web.js"],"names":["FilesystemWeb","super","arguments","this","DB_VERSION","DB_NAME","_writeCmds","undefined","_db","window","unavailable","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","cmd","args","readFlag","indexOf","initDb","then","conn","tx","transaction","objectStore","req","indexName","index","directory","uriPath","cleanedUriPath","replace","fsPath","clear","options","path","getPath","entry","dbRequest","Error","data","content","doRecursive","recursive","occupiedEntry","type","encoding","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","now","Date","pathObj","folder","size","length","ctime","mtime","split","uri","entries","dbIndexRequest","IDBKeyRange","only","depth","match","fullPath","readDirResult","readdir","files","entryPath","entryObj","stat","deleteFile","rmdir","names","map","e","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","startsWith","toObj","toPathComponents","pop","join","toParentDirectory","fromObj","updateTime","async","file","readFile","writeFile","contents","filename","_debug"],"mappings":"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","file":"js/chunk-2d0a4885.ff6ecb8f.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const data = options.data;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw 'The supplied path is a directory.';\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        // const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw 'The supplied path is a directory.';\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (occupiedEntry !== undefined) {\n            data = occupiedEntry.content + data;\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const names = entries.map(e => {\n            return e.substring(path.length + 1);\n        });\n        return { files: names };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        return this._copy(options, true);\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return;\n        }\n        if (toPath.startsWith(fromPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}